const n=JSON.parse(`{"key":"v-24312cdc","path":"/vue/hooks/use-dict.html","title":"use-dict","lang":"zh-CN","frontmatter":{"title":"use-dict","category":["js"],"tag":["hooks"],"description":"介绍 use-dict 是一个用于获取字典数据的 Vue Composition API 钩子函数。它可以帮助你在 Vue 组件中轻松地获取和使用字典数据。 代码 import { onBeforeMount, ref } from \\"vue\\"; // 引入vue中的computed、onBeforeMount、ref函数 import request from \\"@/utils/request\\"; // 引入request函数 const cache = ref(new Map()); // 创建一个ref对象，用于缓存数据 export const useDict = (groupNo, apiUrl, obj) =&gt; { // 定义useDict函数，用于获取字典数据 const dataSource = ref([]); // 创建一个ref对象，用于存储数据源 const options = ref([]); // 创建一个ref对象，用于存储选项 const value2Label = ref({}); // 创建一个ref对象，用于存储值和标签的映射关系 const url = apiUrl || \\"/sysDictionary/detailsByAll\\"; // 设置请求的url，如果没有传入apiUrl，则默认为'/dictionary/detailsByAll' let params = { groupNo }; // 设置请求的参数 onBeforeMount(async () =&gt; { // 在组件挂载前执行异步操作 let list; let isSuccess; if (cache.value.get(groupNo)) { // 如果缓存中存在该groupNo的数据 isSuccess = 200; list = cache.value.get(groupNo); } else { // 如果缓存中不存在该字典的数据 if (obj) { params = obj; } const { data, httpCode } = await request({ method: \\"post\\", url, data: params, }); // 发送请求获取数据 isSuccess = httpCode; list = data; if (httpCode === 200) { // 如果请求成功 cache.value.set(groupNo, data); // 将数据存入缓存 } } if (isSuccess === 200) { // 如果请求成功 const setData = (list) =&gt; { return list.map((item) =&gt; { value2Label.value[item.code] = item.name; return { label: item.name, value: item.code, children: item.children &amp;&amp; setData(item.children), }; }); }; options.value = setData(list); dataSource.value = list; // 将数据存入数据源 } }); const formatter = ({ text }) =&gt; { if (!text) return \\"-\\"; return value2Label.value[text] ?? text; }; return { options, formatter, dataSource, }; };","head":[["meta",{"property":"og:url","content":"https://soft-winds.github.io/vue/hooks/use-dict.html"}],["meta",{"property":"og:site_name","content":"七月的星期七"}],["meta",{"property":"og:title","content":"use-dict"}],["meta",{"property":"og:description","content":"介绍 use-dict 是一个用于获取字典数据的 Vue Composition API 钩子函数。它可以帮助你在 Vue 组件中轻松地获取和使用字典数据。 代码 import { onBeforeMount, ref } from \\"vue\\"; // 引入vue中的computed、onBeforeMount、ref函数 import request from \\"@/utils/request\\"; // 引入request函数 const cache = ref(new Map()); // 创建一个ref对象，用于缓存数据 export const useDict = (groupNo, apiUrl, obj) =&gt; { // 定义useDict函数，用于获取字典数据 const dataSource = ref([]); // 创建一个ref对象，用于存储数据源 const options = ref([]); // 创建一个ref对象，用于存储选项 const value2Label = ref({}); // 创建一个ref对象，用于存储值和标签的映射关系 const url = apiUrl || \\"/sysDictionary/detailsByAll\\"; // 设置请求的url，如果没有传入apiUrl，则默认为'/dictionary/detailsByAll' let params = { groupNo }; // 设置请求的参数 onBeforeMount(async () =&gt; { // 在组件挂载前执行异步操作 let list; let isSuccess; if (cache.value.get(groupNo)) { // 如果缓存中存在该groupNo的数据 isSuccess = 200; list = cache.value.get(groupNo); } else { // 如果缓存中不存在该字典的数据 if (obj) { params = obj; } const { data, httpCode } = await request({ method: \\"post\\", url, data: params, }); // 发送请求获取数据 isSuccess = httpCode; list = data; if (httpCode === 200) { // 如果请求成功 cache.value.set(groupNo, data); // 将数据存入缓存 } } if (isSuccess === 200) { // 如果请求成功 const setData = (list) =&gt; { return list.map((item) =&gt; { value2Label.value[item.code] = item.name; return { label: item.name, value: item.code, children: item.children &amp;&amp; setData(item.children), }; }); }; options.value = setData(list); dataSource.value = list; // 将数据存入数据源 } }); const formatter = ({ text }) =&gt; { if (!text) return \\"-\\"; return value2Label.value[text] ?? text; }; return { options, formatter, dataSource, }; };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-30T06:54:38.000Z"}],["meta",{"property":"article:author","content":"七月的星期七"}],["meta",{"property":"article:tag","content":"hooks"}],["meta",{"property":"article:modified_time","content":"2024-12-30T06:54:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"use-dict\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-30T06:54:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"七月的星期七\\",\\"url\\":\\"https://github.com/soft-winds\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1735541678000,"updatedTime":1735541678000,"contributors":[{"name":"刘晓迪","email":"xiaodi195815052@163.com","commits":1}]},"readingTime":{"minutes":1.45,"words":436},"filePathRelative":"vue/hooks/use-dict.md","localizedDate":"2024年12月30日","excerpt":"<h2> 介绍</h2>\\n<p><code>use-dict</code> 是一个用于获取字典数据的 Vue Composition API 钩子函数。它可以帮助你在 Vue 组件中轻松地获取和使用字典数据。</p>\\n<h2> 代码</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> onBeforeMount<span class=\\"token punctuation\\">,</span> ref <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"vue\\"</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 引入vue中的computed、onBeforeMount、ref函数</span>\\n<span class=\\"token keyword\\">import</span> request <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"@/utils/request\\"</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 引入request函数</span>\\n<span class=\\"token keyword\\">const</span> cache <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 创建一个ref对象，用于缓存数据</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">useDict</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">groupNo<span class=\\"token punctuation\\">,</span> apiUrl<span class=\\"token punctuation\\">,</span> obj</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 定义useDict函数，用于获取字典数据</span>\\n  <span class=\\"token keyword\\">const</span> dataSource <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 创建一个ref对象，用于存储数据源</span>\\n  <span class=\\"token keyword\\">const</span> options <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 创建一个ref对象，用于存储选项</span>\\n  <span class=\\"token keyword\\">const</span> value2Label <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 创建一个ref对象，用于存储值和标签的映射关系</span>\\n  <span class=\\"token keyword\\">const</span> url <span class=\\"token operator\\">=</span> apiUrl <span class=\\"token operator\\">||</span> <span class=\\"token string\\">\\"/sysDictionary/detailsByAll\\"</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 设置请求的url，如果没有传入apiUrl，则默认为'/dictionary/detailsByAll'</span>\\n  <span class=\\"token keyword\\">let</span> params <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> groupNo <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 设置请求的参数</span>\\n  <span class=\\"token function\\">onBeforeMount</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 在组件挂载前执行异步操作</span>\\n    <span class=\\"token keyword\\">let</span> list<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> isSuccess<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cache<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>groupNo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 如果缓存中存在该groupNo的数据</span>\\n      isSuccess <span class=\\"token operator\\">=</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">;</span>\\n      list <span class=\\"token operator\\">=</span> cache<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>groupNo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 如果缓存中不存在该字典的数据</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        params <span class=\\"token operator\\">=</span> obj<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> data<span class=\\"token punctuation\\">,</span> httpCode <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">request</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">method</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"post\\"</span><span class=\\"token punctuation\\">,</span>\\n        url<span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">data</span><span class=\\"token operator\\">:</span> params<span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 发送请求获取数据</span>\\n      isSuccess <span class=\\"token operator\\">=</span> httpCode<span class=\\"token punctuation\\">;</span>\\n      list <span class=\\"token operator\\">=</span> data<span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>httpCode <span class=\\"token operator\\">===</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 如果请求成功</span>\\n        cache<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>groupNo<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 将数据存入缓存</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isSuccess <span class=\\"token operator\\">===</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 如果请求成功</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">setData</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">list</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">item</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n          value2Label<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">[</span>item<span class=\\"token punctuation\\">.</span>code<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> item<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">label</span><span class=\\"token operator\\">:</span> item<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token literal-property property\\">value</span><span class=\\"token operator\\">:</span> item<span class=\\"token punctuation\\">.</span>code<span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token literal-property property\\">children</span><span class=\\"token operator\\">:</span> item<span class=\\"token punctuation\\">.</span>children <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">setData</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n      options<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setData</span><span class=\\"token punctuation\\">(</span>list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      dataSource<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> list<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 将数据存入数据源</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">formatter</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> text <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>text<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"-\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> value2Label<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">[</span>text<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">??</span> text<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n    options<span class=\\"token punctuation\\">,</span>\\n    formatter<span class=\\"token punctuation\\">,</span>\\n    dataSource<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
